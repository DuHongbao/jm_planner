        
        
        int JmJps::search(Eigen::Vector3d start_pt, Eigen::Vector3d end_pt, vector<Eigen::Vector3d>& colli_start, 
                                              vector<Eigen::Vector3d>& colli_end, vector<Eigen::Vector3d>& jps_path){
                vector<Graphnode::Ptr> graph;
                graph = createGraph(start_pt, end_pt);
                cout<<"运行到这里啦9！"<<endl;
                NodePtr cur_node = path_node_pool_[0];

                cur_node->parent = NULL;
                cur_node->position = start_pt;
                cur_node->index = posToIndex(start_pt);
                cur_node->g_score = 0.0;

                //Eigen::Vector3d end_state(6);

                Eigen::Vector3i  end_index;
                double time_to_goal;

                end_index = posToIndex(end_pt);
                cur_node->f_score = lambda_heu_ * getEuclHeu(cur_node->position, end_pt);
                cur_node->node_state = IN_OPEN_SET;
                open_set_.push(cur_node);
                use_node_num_ +=1;
                expanded_nodes_.insert(cur_node->index, cur_node);

                NodePtr neighbor = NULL;
                NodePtr ternimate_node = NULL;
                int itera_i(0);
                int num_colli = 0;
                while(!open_set_.empty()){
                        /*---------------get the lowest f_score node----------------*/
                        if(num_colli==colli_start.size()) {
                                cout<<"hello"<<endl;
                        }else{
                                cur_node = open_set_.top();
                        }
                        /*----------------determine  termination------------------*/
                        bool  reach_end = abs(cur_node->index(0)-end_index(0))<=1&&abs(cur_node->index(1)-end_index(1))<=1&&abs(cur_node->index(2)-end_index(2))<=1;
                        cout<<reach_end<<":"<<"运行到这里啦10！"<<endl;
                        if(reach_end){
                                ternimate_node = cur_node;
                                retrievePath(ternimate_node);
                                has_path_ = true;
                                cout<<"true"<<endl;
                                return REACH_END;
                        }
                        /*----------------pop node and add to close set----------------*/
                        open_set_.pop();
                        cur_node->node_state = IN_CLOSE_SET;
                       
                        /*---------- init neighbor expansion ---------- */
                        Eigen::Vector3d cur_pos = cur_node->position;
                        Eigen::Vector3d pro_pos;
                        double pro_t;

                        vector<Eigen::Vector3d> inputs;
                        Eigen::Vector3d d_pos;
                                                
                        /* ---------- expansion loop ---------- */
                        pcl::KdTreeFLANN<pcl::PointXYZ>  kdtree;

                        kdtree.setInputCloud(pclCorner_input.makeShared());

                        pcl::PointXYZ  searchPoint;
                        int K = 15;



                        searchPoint.x = (colli_start[num_colli](0) + colli_end[num_colli](0))/2.0;
                        searchPoint.y = (colli_start[num_colli](1) + colli_end[num_colli](1))/2.0;
                        searchPoint.z = (colli_start[num_colli](2) + colli_end[num_colli](2))/2.0;
                        std::vector<int> pointIdxNKNSearch(K);
	                std::vector<float>pointNKNSquaredDistance(K);
                        std::cerr << "K nearest neighbour search at ( " << searchPoint.x << "  " << searchPoint.y << "   " << searchPoint.z <<	")with K= "<<K<< std::endl;

	                if (kdtree.nearestKSearch(searchPoint, K, pointIdxNKNSearch, pointNKNSquaredDistance) >0)  {
                                //将最近邻的K个角点构建kd树，由起点开始扩展最近邻m个点，将每一个障碍中心作为一簇待扩展点，启发式搜索最短路径
		                for (std::size_t i = 0; i < pointIdxNKNSearch.size(); i++) {
       			                        std::cerr	<< "    " << pclCorner_input[pointIdxNKNSearch[i]].x
						                        << "    " << pclCorner_input[pointIdxNKNSearch[i]].y
						                        << "    " << pclCorner_input[pointIdxNKNSearch[i]].z 
						                        << " with a distance :"<<std::sqrt( pointNKNSquaredDistance[i] )<< std::endl;
                                                pro_pos <<pclCorner_input[pointIdxNKNSearch[i]].x,pclCorner_input[pointIdxNKNSearch[i]].y,pclCorner_input[pointIdxNKNSearch[i]].z;
                                                Eigen::Vector3i pro_id = posToIndex(pro_pos);
                                                NodePtr  pro_node = expanded_nodes_.find(pro_id);

                                                if (pro_node != NULL && pro_node->node_state == IN_CLOSE_SET) {
                                                        cout << "in closeset" << endl;
                                                        continue;
                                                }
                                                d_pos = pro_pos - cur_pos;
                                                /*-------------compute  cost--------------*/
                                                double time_to_goal, tmp_g_score, tmp_f_score;
                                                tmp_g_score = d_pos.squaredNorm() + cur_node->g_score;
                                                tmp_f_score = tmp_g_score + lambda_heu_ * getEuclHeu(pro_pos, end_pt);
                                                if(pro_node==NULL)
                                                {
                                                        pro_node = path_node_pool_[use_node_num_];
                                                        pro_node->g_score = tmp_g_score;
                                                        pro_node->f_score  = tmp_f_score;
                                                        pro_node->parent = cur_node;
                                                        pro_node->node_state = IN_OPEN_SET;
                                                
                                                        open_set_.push(pro_node);

                                                        expanded_nodes_.insert(pro_id, pro_node);
                                                        use_node_num_ += 1;

                                                        if (use_node_num_ == allocate_num_) {
                                                                cout << "run out of memory." << endl;
                                                                return NO_PATH;
                                                        } 
                                                }else if (pro_node->node_state == IN_OPEN_SET) {
                                                        if (tmp_g_score < pro_node->g_score) {
                                                                // pro_node->index = pro_id;
                                                                pro_node->position = pro_pos;
                                                                pro_node->f_score = tmp_f_score;
                                                                pro_node->g_score = tmp_g_score;
                                                                pro_node->parent = cur_node;
                                                        }
                                                }else {
                                                        cout << "error type in searching: " << pro_node->node_state << endl;
                                                }
                                }
                                
                        }
                        num_colli++; 
                        cout<<"colli_start:"<<colli_start.size()<<endl;
                        cout<<"num_colli:"<<num_colli<<endl;
                        cout<<"!open_set_.empty():"<<!open_set_.empty()<<endl;
                        if(num_colli == colli_start.size()) {

                                /*将目标点加入队列*/
                                NodePtr  end_node ;
                                end_node->parent = cur_node;
                                end_node->position = end_pt;
                                end_node->index = posToIndex(end_pt);
                                end_node->g_score = cur_node->g_score + (end_pt - cur_pos).squaredNorm();
                                open_set_.push(end_node);
                                cur_node = end_node;
                                cout<<"=============="<<endl;

                        }
                }
                /* ---------- open set empty, no path ---------- */
                cout << "open set empty, no path!" << endl;
                cout << "use node num: " << use_node_num_ << endl;
                return NO_PATH;
        }